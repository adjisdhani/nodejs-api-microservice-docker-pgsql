services:
  # postgres:
  #   image: postgres
  #   container_name: pgsql-container
  #   environment:
  #     POSTGRES_USER: postgres
  #     POSTGRES_PASSWORD: postgres
  #     POSTGRES_DB: catalog_db
  #   volumes:
  #     - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
  #   ports:
  #     - "5432:5432"
  #   healthcheck:
  #     test: ["CMD-SHELL", "pg_isready -U postgres"]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 5

  # service-buku:
  #   build: ./service-buku
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  #   environment:
  #     DB_HOST: postgres
  #     DB_PORT: 5432
  #     DB_USER: postgres
  #     DB_PASS: postgres
  #     DB_NAME: catalog_db

  # service-review:
  #   build: ./service-review
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  #   environment:
  #     DB_HOST: postgres
  #     DB_PORT: 5432
  #     DB_USER: postgres
  #     DB_PASS: postgres
  #     DB_NAME: catalog_db

  # api-gateway:
  #   build: ./api-gateway
  #   ports:
  #     - "3000:3000"
  #   depends_on:
  #     service-buku:
  #       condition: service_started
  #     service-review:
  #       condition: service_started

  service-buku:
    build: ./service-buku
    environment:
      DATABASE_URL: ${DATABASE_URL}
    # depends_on:
    #   api-gateway:
    #     condition: service_started
    networks:
      - default
    dns:
      - 8.8.8.8
      - 8.8.4.4

  service-review:
    build: ./service-review
    environment:
      DATABASE_URL: ${DATABASE_URL}
    # depends_on:
    #   api-gateway:
    #     condition: service_started
    networks:
      - default
    dns:
      - 8.8.8.8
      - 8.8.4.4

  api-gateway:
    build: ./api-gateway
    ports:
      - "3000:3000"
    depends_on:
      service-buku:
        condition: service_started
      service-review:
        condition: service_started
